#include <SPI.h>
#include <WiFiNINA.h>
#define NEW_ENTRY 7

char ssid[] = "yournetwork";        // your network SSID (name)
char pass[] = "yourpassword";    // your network password (use for WPA, or use as key for WEP)
int keyIndex = 0;                // your network key index number (needed only for WEP)

int status = WL_IDLE_STATUS;
WiFiServer server(80);


// Pins for LED status inputs
const int LED_GREEN = 2;
const int LED_BLUE = 3;
const int LED_RED = 4;

//const int NEW_ENTRY = 5;
// Structure to hold log information
struct LogEntry {
  String date;
  String time;
  String status;
};

// Array to hold the ten most recent logs
LogEntry logs[1];
int logIndex = 0;

// Function prototypes
void updateLogs(String status);
void printWiFiStatus();


void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  pinMode(NEW_ENTRY, OUTPUT);
  digitalWrite(NEW_ENTRY, LOW);

  pinMode(LED_GREEN, INPUT);
  pinMode(LED_BLUE, INPUT);
  pinMode(LED_RED, INPUT);
  pinMode(NEW_ENTRY, INPUT);

  Serial.println("Access Point Web Server");

  // check for the WiFi module:
  if (WiFi.status() == WL_NO_MODULE) {
    Serial.println("Communication with WiFi module failed!");
    // don't continue
    while (true);
  }

  String fv = WiFi.firmwareVersion();
  if (fv < WIFI_FIRMWARE_LATEST_VERSION) {
    Serial.println("Please upgrade the firmware");
  }

  // by default the local IP address will be 192.168.4.1
  // you can override it with the following:
  // WiFi.config(IPAddress(10, 0, 0, 1));

  // print the network name (SSID);
  Serial.print("Creating access point named: ");
  //Serial.println(ssid);

  // Create open network. Change this line if you want to create an WEP network:
  status = WiFi.beginAP(ssid, pass);
  if (status != WL_AP_LISTENING) {
    Serial.println("Creating access point failed");
    // don't continue
    while (true);
  }

  // wait 10 seconds for connection:
  delay(10000);

  // start the web server on port 80
  server.begin();

  // you're connected now, so print out the status
  printWiFiStatus();
}


void loop() {
  // compare the previous status to the current status
  if (status != WiFi.status()) {
    // it has changed update the variable
    status = WiFi.status();

    if (status == WL_AP_CONNECTED) {
      // a device has connected to the AP
      Serial.println("Device connected to AP");
    } else {
      // a device has disconnected from the AP, and we are back in listening mode
      Serial.println("Device disconnected from AP");
    }
  }

  //Serial.println(NEW_ENTRY);
  int test = 0;
  if (digitalRead(NEW_ENTRY) == HIGH){
    //Serial.println(NEW_ENTRY);
    //Serial.println("test: " + test);
    test++;
    bool currentGreen = digitalRead(LED_GREEN)==1;
    bool currentBlue = digitalRead(LED_BLUE)==1;
    bool currentRed = digitalRead(LED_RED) == 1;

    if (currentGreen) {
      updateLogs("Status: Empty");
    } else if (currentBlue) {
      updateLogs("Status: Approaching full");
    } else if (currentRed) {
      updateLogs("Status: Full; collection required");
    } else {
      updateLogs("");
    }  
  }

  WiFiClient client = server.available();   // listen for incoming clients

   if (client) {                             
    Serial.println("new client");          
    String currentLine = "";               
    while (client.connected()) {         
      if (client.available()) {        
        char c = client.read();           
        Serial.write(c);         
        if (c == '\n') {     

          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println();

            // the content of the HTTP response follows the header:
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta http-equiv='refresh' content='5'/><title>Dhaka Sharps Disposal Bin</title></head>");
            client.println("<body>");
            client.println("<h1>Dhaka Sharps Disposal Bin</h1>");
            client.println();
          
            // HTML contentaccess
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta http-equiv='refresh' content='5'/><title>Dhaka Sharps Disposal Bin</title></head>");
            
            
            // Add the dynamic table
            client.println("<table border='1'>");
            client.println("<tr><th>Date</th><th>Time</th><th>Status</th></tr>");
            
          // Loop over the logs array and add each entry as a table row
            if (logs[0].date != "") { // Check if the log entry is valid
              client.println("<tr>");
              client.println("<td>" + logs[0].date + "</td>");
              client.println("<td>" + logs[0].time + "</td>");
              client.println("<td>" + logs[0].status + "</td>");
              client.println("</tr>");
            }
            
            client.println("</table>");
            // End of the HTML document
            client.println("</body></html>");

            
            break; // Exit the loop after sending the response

            // The HTTP response ends with another blank line:
            client.println();
            // break out of the while loop:
            break;
          } else {    // if you got a newline, then clear currentLine:
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }

      }
    }
    // close the connection:
    client.stop();
    Serial.println("client disconnected");
  }

}

void printWiFiStatus() {
  // print the SSID of the network you're attached to:
  Serial.print("SSID: ");
  Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  Serial.print("IP Address: ");
  Serial.println(ip);

  // print where to go in a browser:
  Serial.print("To see this page in action, open a browser to http://");
  Serial.println(ip);
}

void updateLogs(String newStatus) {

  // Get current date and time
  String currentDate = "2024-04-07"; // Placeholder, use a real function to get the date
  String currentTime = "12:00:00"; // Placeholder, use a real function to get the time
  
  // Add the new log at the top
  logs[0].date = currentDate;
  logs[0].time = currentTime;
  logs[0].status = newStatus;
}
